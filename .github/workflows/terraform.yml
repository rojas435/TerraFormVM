name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/**'
      - 'environments/**'
      - 'shared/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'environments/**'
      - 'shared/**'

env:
  TF_VERSION: 1.6.0
  ARM_USE_OIDC: true

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, production]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: environments/${{ matrix.environment }}
      run: terraform init -backend=false

    - name: Terraform Validate
      working-directory: environments/${{ matrix.environment }}
      run: terraform validate

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: sarif
        output_file_path: checkov-report.sarif

    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-report.sarif

  plan-dev:
    name: Plan Development
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      working-directory: environments/dev
      run: terraform init

    - name: Terraform Plan
      working-directory: environments/dev
      run: terraform plan -no-color
      env:
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}

  deploy-dev:
    name: Deploy Development
    runs-on: ubuntu-latest
    needs: plan-dev
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      working-directory: environments/dev
      run: terraform init

    - name: Terraform Apply
      working-directory: environments/dev
      run: terraform apply -auto-approve
      env:
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}

  plan-staging:
    name: Plan Staging
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      working-directory: environments/staging
      run: terraform init

    - name: Terraform Plan
      working-directory: environments/staging
      run: terraform plan -no-color
      env:
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-prod]')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      working-directory: environments/production
      run: terraform init

    - name: Terraform Plan
      working-directory: environments/production
      run: terraform plan -no-color
      env:
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}

    - name: Terraform Apply
      working-directory: environments/production
      run: terraform apply -auto-approve
      env:
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}